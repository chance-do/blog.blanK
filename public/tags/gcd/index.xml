<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gcd on Blank&#39;s Blog</title>
    <link>https://mjyi.github.io/tags/gcd/index.xml</link>
    <description>Recent content in Gcd on Blank&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2014, blanK; all rights reserved.</copyright>
    <atom:link href="https://mjyi.github.io/tags/gcd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>读:《Objective-C高级编程》之GCD</title>
      <link>https://mjyi.github.io/post/1701-gcd/</link>
      <pubDate>Tue, 17 Jan 2017 14:26:31 +0000</pubDate>
      
      <guid>https://mjyi.github.io/post/1701-gcd/</guid>
      <description>&lt;!-- ![](/uploads/1703.jpg) --&gt;

&lt;h1 id=&#34;什么是gcd&#34;&gt;什么是GCD&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Grand Central Dispatch(GCD)&lt;/code&gt;是异步执任务的技术之一。一般将应用程序中记述的线程管理用的代码在系统级中实现。开发只需要定义想执行并追加到适当的&lt;code&gt;Dispatch Queue&lt;/code&gt; 中，&lt;code&gt;GCD&lt;/code&gt;就能生成必要的线程并计划执行任务，由于线程管理是作为系统的一部分来实现的，因此可统一管理，也可以执行任务，这样就比以前的线程更有效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;关于多线程编程&#34;&gt;关于多线程编程&lt;/h1&gt;

&lt;p&gt;线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流。
一个&lt;code&gt;CPU&lt;/code&gt; 一次只能执行一个命令，不能执行某处分开的并列的两个命令。因此通过&lt;code&gt;CPU&lt;/code&gt;执行的&lt;code&gt;CPU命令&lt;/code&gt;就好比一条无分叉的大道，其执行不会出现分歧。

&lt;code&gt;OS X&lt;/code&gt;和&lt;code&gt;iOS&lt;/code&gt;的核心&lt;code&gt;XNU内核&lt;/code&gt;在发生操作系统事件时，会切换执行路径，执行中的状态，例如&lt;code&gt;CPU&lt;/code&gt;的寄存器等信息保存到各自路径专用的内存块中，从切换目标路径专用的内存块中，复原&lt;code&gt;CPU&lt;/code&gt;寄存器等信息，继续执行切换路径的&lt;code&gt;CPU&lt;/code&gt;命令行。这就称为&lt;code&gt;上下文切换&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由于使用多线程的程序可以在某个线程和其他线程之间反复多次的进行上下文切换，因此看上去就好像1个&lt;code&gt;CPU&lt;/code&gt;核能够并列的执行多个线程一样，而且在具有多个&lt;code&gt;CPU&lt;/code&gt;核的情况下，就是真的提供多个&lt;code&gt;CPU&lt;/code&gt;核并行执行多个线程的技术。&lt;/p&gt;

&lt;p&gt;这种利用多线程编程的技术就称为“多线程编程”。&lt;/p&gt;

&lt;p&gt;但是，多线程编程实际上是一种易发生各种问题的编程技术。比如多个线程更新相同的资源会导致数据的不一致（数据竞争）、停止等待事件的线程会导致多个线程相互持续等待（死锁）、使用太多线程会消耗大量内存等。&lt;/p&gt;

&lt;h1 id=&#34;gcd-的-api&#34;&gt;GCD 的 API&lt;/h1&gt;

&lt;h4 id=&#34;dispatch-queue&#34;&gt;Dispatch Queue&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_async(dispatch_queue_t  _Nonnull queue, ^{
   // doSomething     
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Dispatch Queue&lt;/code&gt;, 是执行处理的等待队列。&lt;/p&gt;

&lt;p&gt;使用Block语法定义&lt;code&gt;想执行的任务&lt;/code&gt;，通过&lt;code&gt;dispatch_async&lt;/code&gt;函数追加赋值在变量queue的&lt;code&gt;Dispatch Queue&lt;/code&gt;中。仅这样就可以使指定的&lt;code&gt;Block&lt;/code&gt;在另外一个线程执行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dispatch Queue&lt;/code&gt;按照FIFO（First-In-First-Out）执行处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dispatch Queue&lt;/code&gt;有两种：&lt;/p&gt;

&lt;p&gt;Dispatch Queue | 说明 |
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;ndash; |&amp;mdash;&amp;mdash;&amp;mdash;
Serial Dispatch Queue     | 等待现在执行中处理结果     | 使用一个线程
Concurrent Dispatch Queue | 不等的现在执行中处理结果    | 使用多个线程&lt;/p&gt;

&lt;h4 id=&#34;dispatch-queue-create&#34;&gt;dispatch_queue_create&lt;/h4&gt;

&lt;p&gt;通过&lt;code&gt;dispatch_queue_create&lt;/code&gt;生成Dispatch Queue。&lt;/p&gt;

&lt;p&gt;如下生成一个 Serial Dispatch Queue：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_queue_create(const char * _Nullable label, dispatch_queue_attr_t  _Nullable attr);

dispatch_queue_t mySerialDispatchQueue = dispatch_queue_create(&amp;quot;com.example.gcd.mySerialDispatchQueue&amp;quot;, NULL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个参数指定&lt;code&gt;Dispatch Queue&lt;/code&gt;的名称，第二个参数指定&lt;code&gt;NULL/DISPATCH_QUEUE_SERIAL&lt;/code&gt; 生成&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;。。生成&lt;code&gt;Concurrent Dispatch Queue&lt;/code&gt;时，将第二个参数指定为&lt;code&gt;DISPATCH_QUEUE_CONCURRENT&lt;/code&gt;，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_queue_t myConcurretnDispatchQueue = dispatch_queue_create(&amp;quot;com.example.gcd.myConCurrentDispatchQueue&amp;quot;, DISPATCH_QUEUE_CONCURRENT);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dispatch_queue_create 函数的返回值为表示Dispatch Queuede的 dispatch_queue_t类型。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Serial Dispatch Queue&lt;/code&gt; 一次只能执行一个追加任务。系统对一个&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;只生成一并使用一个线程，如果生成2000个&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;，那么就生成2000个线程。如果过多使用多线程就会消耗大量内存，引起大量的上下文切换，大幅度降低系统的响应性能。&lt;/p&gt;

&lt;p&gt;只在为了避免多线程编程问题之一——多个线程更新相同资源导致数据竞争时，使用&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下面分别添加几个block到两个队列中：
Serial Dispatch Queue&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;	dispatch_queue_t mySerialDispatchQueue = dispatch_queue_create(&amp;quot;com.example.gcd.mySerialDispatchQueue&amp;quot;, NULL);
    dispatch_async(mySerialDispatchQueue, ^{ NSLog(@&amp;quot;blcok1&amp;quot;); });
    dispatch_async(mySerialDispatchQueue, ^{ NSLog(@&amp;quot;block2&amp;quot;); });
    dispatch_async(mySerialDispatchQueue, ^{ NSLog(@&amp;quot;block3&amp;quot;); });
    dispatch_async(mySerialDispatchQueue, ^{ NSLog(@&amp;quot;block4&amp;quot;); });
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017-01-19 20:23:50.599 gcd[13765:2856357] blcok1
2017-01-19 20:23:50.599 gcd[13765:2856357] block2
2017-01-19 20:23:50.599 gcd[13765:2856357] block3
2017-01-19 20:23:50.599 gcd[13765:2856357] block4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concurrent Dispatch Queue&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;    dispatch_queue_t myConcurretnDispatchQueue = dispatch_queue_create(&amp;quot;com.example.gcd.myConcurretnDispatchQueue&amp;quot;, DISPATCH_QUEUE_CONCURRENT);
    dispatch_async(myConcurretnDispatchQueue, ^{ NSLog(@&amp;quot;blcok1&amp;quot;); });
    dispatch_async(myConcurretnDispatchQueue, ^{ NSLog(@&amp;quot;block2&amp;quot;); });
    dispatch_async(myConcurretnDispatchQueue, ^{ NSLog(@&amp;quot;block3&amp;quot;); });
    dispatch_async(myConcurretnDispatchQueue, ^{ NSLog(@&amp;quot;block4&amp;quot;); });
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2017-01-19 20:25:17.937 gcd[13811:2867322] blcok1
2017-01-19 20:25:17.937 gcd[13811:2867323] block3
2017-01-19 20:25:17.937 gcd[13811:2867325] block2
2017-01-19 20:25:17.937 gcd[13811:2867366] block4
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 iOS 6+ 和 Mac OS X 10.8+ ARC 可以管理GCD.在此之前，用下面代码释放gcd&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_release(queue);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main-dispatch-queue-global-dispatch-queue&#34;&gt;Main Dispatch Queue/Global Dispatch Queue&lt;/h4&gt;

&lt;p&gt;Main Dispatch Queue 是在主线程中执行的Dispatch Queue。 是Serial Dispatch Queue。
追加到 Main Dispatch Queue 的处理实在主线程的RunLoop 中执行，由于是在主线程中执行，因此要将用户界面更新等一些必须在主线程中执行的处理追加&lt;code&gt;Main Dispatch Queue&lt;/code&gt;。
Global Dispatch Queue 是所有应用程序能够使用的 Concurrent Dispatch Queue。没必要通过dispatch_queue_create 逐个生成Concurrent Dispatch Queue。只要的Global Dispatch Queue中使用即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;//	Main Dispatch Queue
    dispatch_queue_t mainQueue = dispatch_get_main_queue();
    /*
     * Global Dispatch Queue 优先级从高到低
	 */

    dispatch_queue_t globalQueueHigh = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);

    dispatch_queue_t globalQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

    dispatch_queue_t globalQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);

    dispatch_queue_t globalQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是最常见的Main Dispatch Queue和Global Dispatch Queue的使用方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
       /*
        *   可并行的处理
        */
        dispatch_async(dispatch_get_main_queue(), ^{
            //只能在主线程中执行的处理
        });
    });

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dispatch-set-target-queue&#34;&gt;dispatch_set_target_queue&lt;/h4&gt;

&lt;p&gt;dispatch_set_target_queue函数是变更生成的&lt;code&gt;Dispatch Queue&lt;/code&gt;的优先级。&lt;/p&gt;

&lt;p&gt;修改用户队列的目标队列，使多个serial queue在目标queue上一次只有一个执行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt; // dispatch_set_target_queue(&amp;lt;#dispatch_object_t  _Nonnull object#&amp;gt;, dispatch_queue_t  _Nullable queue)

   dispatch_queue_t globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);

   dispatch_set_target_queue(mySerialDispatchQueue, globalDispatchQueueBackground);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定要变更执行优先级的Dispatch Queue 为 dispatch_set_target_queue函数的第一个参数，指定与要使用的执行优先级相同优先级的Global Dispatch Queue为第二个参数（目标）。第一个参数如果指定系统提供的Main Dispatch Queue 和 Global Dispatch Queue 则不知道会出现什么情况。因为你不能给系统的queue设置权限，所以这些均不可指定。&lt;/p&gt;

&lt;p&gt;一般都是把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这时使用dispatch_set_target_queue将多个串行的queue指定到了同一目标，那么着多个串行queue在目标queue上就是同步执行的，不再是并行执行。&lt;/p&gt;

&lt;h4 id=&#34;dispatch-after&#34;&gt;dispatch_after&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;    dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW,(int64_t)(3 * NSEC_PER_SEC));
     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(33 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        NSLog(@&amp;quot;waited at least three seconds&amp;quot;);
    });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dispatch_after 函数并不是在指定时间后执行，只是在指定时间追加处理到Dispatch Queue中。&lt;/p&gt;

&lt;p&gt;第一个参数是指定时间用的dispatch_time_t 类型的值。使用dispatch_time 或者dispatch_walltimeb&lt;/p&gt;

&lt;p&gt;第二个参数指定要追加处理的Dispatch Queuede，第三个参数指定执行处理的block。&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group&#34;&gt;Dispatch Group&lt;/h4&gt;

&lt;p&gt;在追加到&lt;code&gt;Dispatch Queue&lt;/code&gt;中的多个处理全部结束后执行结束处理。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将执行的处理全部追加到 一个&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;中，并在最后追加结束处理。&lt;/li&gt;
&lt;li&gt;但是在并行队列中可以使用&lt;code&gt;Dispatch Group&lt;/code&gt;实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Target：追加3个&lt;code&gt;block&lt;/code&gt;到&lt;code&gt;Global Dispatch Queue&lt;/code&gt; 中，这些&lt;code&gt;Block&lt;/code&gt;如果全部执行完成，就会执行&lt;code&gt;Main Dispatch Queue&lt;/code&gt;中结束处理的&lt;code&gt;Block&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;    dispatch_group_t group = dispatch_group_create();
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk0&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk1&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk2&amp;quot;); });
    dispatch_group_async(group, queue, ^{  sleep(3); NSLog(@&amp;quot;blk3&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk4&amp;quot;); });
    dispatch_group_notify(group, dispatch_get_main_queue(), ^{
        NSLog(@&amp;quot;over&amp;quot;);
    });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt; 向并行线程追加处理，多个线程并行执行，所以执行的顺序不定。 但是&lt;code&gt;”over”&lt;/code&gt;一定是最后执行的。另外，也可以使用&lt;code&gt;dispatch_group_wait&lt;/code&gt;函数，仅等待全部处理执行结束。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;    dispatch_group_t group = dispatch_group_create();
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk0&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk1&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk2&amp;quot;); });
    dispatch_group_async(group, queue, ^{  sleep(3); NSLog(@&amp;quot;blk3&amp;quot;); });
    dispatch_group_async(group, queue, ^{  NSLog(@&amp;quot;blk4&amp;quot;); });
    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);
    NSLog(@&amp;quot;over&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dispatch_group_wait&lt;/code&gt;的二个参数是等待的时间。如果返回值为0，则表示所有的任务执行完毕。否则，group中仍有任务在执行。&lt;/p&gt;

&lt;h4 id=&#34;dispatch-barrier-async&#34;&gt;dispatch_barrier_async&lt;/h4&gt;

&lt;p&gt;在访问数据库或文件时，使用&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;能避免数据竞争的问题。&lt;/p&gt;

&lt;p&gt;写入处理确实不能与其他的写入处理以及包含读取处理的其他某些处理并行执行。但是如果读取处理只是与读取处理并行执行，那么多个并行执行就不会发生问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olns5z1r5.bkt.clouddn.com/image/illustration/blog_gcd_barrier.png&#34; alt=&#34;Dispatch_barrier_async函数的处理流程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;首先&lt;code&gt;dispatch_queue&lt;/code&gt;生成函数&lt;code&gt;Concurrent Dispatch Queue&lt;/code&gt;,在&lt;code&gt;dispatch_async&lt;/code&gt;中追加读取操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_queue_t = queue = dispatch_queue_create(&amp;quot;com.example.gcd.ForBarrier&amp;quot;, DISPATCH_QUEUE_CONCURRENT);
dispatch_async(queue, blk0_for_reading);
dispatch_async(queue, blk2_for_reading);
dispatch_async(queue, blk3_for_reading);
dispatch_barrier_async(queue, blk_for_writing);
dispatch_async(queue, blk4_for_reading);
dispatch_async(queue, blk5_for_reading);
dispatch_async(queue, blk6_for_reading);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dispatch-sync&#34;&gt;dispatch_sync&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dispatch_async&lt;/code&gt;函数是&lt;code&gt;非同步&lt;/code&gt;的，即将指定的Block&lt;code&gt;非同步&lt;/code&gt;的加入到指定的&lt;code&gt;Dispatch Queue&lt;/code&gt;中，&lt;code&gt;dispatch_sync&lt;/code&gt;函数不做任何等待。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dispatch_sync&lt;/code&gt;函数&lt;code&gt;同步&lt;/code&gt;的将Block追加到&lt;code&gt;Dispatch Queue&lt;/code&gt;中，在Block结束之前，函数会一直等待。&lt;/p&gt;

&lt;p&gt;经常使用的一种情形是：执行&lt;code&gt;Main Dispatch Queue&lt;/code&gt;时，使用另外的线程&lt;code&gt;Global Dispatch Queue&lt;/code&gt;进行处理，处理结束后立即使用所得到的结果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0),^{
  /*
   处理
   */
   dispatch_sync(dispatch_get_main_queue(), ^{
     // 主线程操作，如刷新UI
     });
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦调用&lt;code&gt;dispatch_sync&lt;/code&gt;函数，那么在指定的处理结束之前，该函数都不会返回。也是因为这个特性，在使用不当时，便会造成一个严重的问题，即&lt;code&gt;死锁&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如在主线程中使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_sync(dispatch_get_main_queue(), ^{
  NSLog(@&amp;quot;Hello????&amp;quot;);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dispatch-apply&#34;&gt;dispatch_apply&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dispatch_apply&lt;/code&gt;函数是&lt;code&gt;dispatch_sync&lt;/code&gt;和&lt;code&gt;Dispatch Group&lt;/code&gt;的关联API。
它按指定的次数将指定的&lt;code&gt;Block&lt;/code&gt;追加到指定的&lt;code&gt;Dispatch Queue&lt;/code&gt;,并等待全部处理执行结束。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;dispatch_queue queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_apply(10, queue, ^(size_t index){
  NSLog(@&amp;quot;%zu&amp;quot;,index);
  });
  NSLog(@&amp;quot;Done&amp;quot;); // 最后执行！
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dispatch-suspend-dispatch-resume&#34;&gt;dispatch_suspend/dispatch_resume&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dispatch_suspend&lt;/code&gt;挂起指定的&lt;code&gt;Dispatch Queue&lt;/code&gt;。
‵‵‵
dispatch_suspend(queue);
‵‵‵
&lt;code&gt;dispatch_resume&lt;/code&gt;恢复指定的&lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;dispatch-once&#34;&gt;dispatch_once&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;static int initialized = NO;
if (initialized == NO) {
    /*
     * 初始化
     */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;static dispatch_once_t pred;
dispatch_once(&amp;amp;pred, ^{
   /*
    * 初始化
    */
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过&lt;code&gt;dispatch_once&lt;/code&gt; 函数，代码即使在多线程环境下执行，也可保证百分之百安全。&lt;/p&gt;

&lt;p&gt;第一组代码在大多数情况下也是安全的。但在多核CPU中，在正在更新的表示是否初始化的标志变量时，读取，就有可能多次执行初始化处理。而用&lt;code&gt;dispatch_once&lt;/code&gt;函数初始化就不必担心这样的问题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dreamingwish.com/article/gcd-guide-dispatch-once-1.html&#34;&gt;GCD外传：dispatch_once(上)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>